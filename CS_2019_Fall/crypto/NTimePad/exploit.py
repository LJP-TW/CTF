#!/usr/bin/python3

def show(textarray):
    for i, t in enumerate(textarray):
        print('{}: {}'.format(i, t))

def xorstring(a, b):
    if len(a) >= len(b):
        length = len(b)
    else:
        length = len(a)
    result = b''
    for i in range(length):
        result += bytes([a[i] ^ b[i]])
    print('{} ^ {}: {}'.format(a[:length], b[:length], result))
    return result
    
btext = []
with open('./ciphers') as f:
    text = f.read().split()
    for t in text:
        btext.append(bytes(bytearray.fromhex(t)))

show(btext)

flag = xorstring(btext[4],  b'bit or character')
flag = xorstring(btext[9],  b'roperty of perfect secrecy must use ')
flag = xorstring(btext[1],  b'racked, but requires the use of a one-time')
flag = xorstring(btext[10], b'ts as OTP keys. Digital versions of one-time pad')
flag = xorstring(btext[5],  b'sponding bit or character from the pad using modular addition')
flag = xorstring(btext[7],  b'part, and kept completely secret, then the resulting ciphertext')
flag = xorstring(btext[12], b' secure key distribution have made them impractical for most applications')
flag = xorstring(btext[11], b'tions for critical diplomatic and military communication, but the problems')
flag = xorstring(btext[0],  b'In cryptography, the one-time pad is an encryption technique that cannot be ')
flag = xorstring(btext[2],  b'r longer than, the message being sent. In this technique, a plaintext is pair')

print('left flag length: {}'.format(len(btext[0])-len(flag)))

for i, t in enumerate(btext):
    print('{}: '.format(i), end = '')
    xorstring(t, flag)

print('\n\n{}'.format(flag))
