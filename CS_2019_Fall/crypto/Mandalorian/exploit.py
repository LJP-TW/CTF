#!/usr/bin/python3
from pwn import *
from Crypto.Util.number import *
import math, decimal

def info():
    r.sendlineafter('>', '1')

    r.recvuntil('c = ')
    c = int(r.recvuntil('\n', drop=True))
    print('c : {}'.format(c))

    r.recvuntil('e = ')
    e = int(r.recvuntil('\n', drop=True))
    print('e : {}'.format(e))

    r.recvuntil('n = ')
    n = int(r.recvuntil('\n', drop=True))
    print('n : {}'.format(n))
    print('gcd(n, 16): {}'.format(math.gcd(n, 16)))
    return c, e, n

def decrypt(c):
    r.sendlineafter('>', '2')
    sleep(0.01)
    r.sendline(str(c))

    r.recvuntil('m = ')
    m = int(r.recvuntil('\n', drop=True))
    return m

gg = False
while gg == False:
    try:
        r = remote('localhost', 5566)
        # r = remote('edu-ctf.csie.org', 10192)
        c, e, n = info()
        
        decimal.getcontext().prec = n.bit_length()

        bound = [decimal.Decimal(0), decimal.Decimal(n)]
        loopCount = int(math.log(n, 16))
        mypow = pow(16, e, n)
        
        for i in range(1, loopCount):
            c *= mypow
            c = c % n
            m = decrypt(c)
        
            start = bound[0]
            gap = bound[1] - bound[0]
        
            bound[0] = start + gap * m / 16
            bound[1] = start + gap * (m + 1) / 16
        
            # print('{} m: {}; bound: {}'.format(i, m, bound))
        
        # print('bound: [{}, {}]'.format(int(bound[0]), int(bound[1])))
        
        for i in range(int(bound[0]), int(bound[1])):
            f = long_to_bytes(i)
            print(f)

            # FLAG{Youg0tTH3Fl4GIHavesPoKEN}
            if f[:4].lower() == b'flag':
                gg = True
        r.close()
    except:
        r.close()
